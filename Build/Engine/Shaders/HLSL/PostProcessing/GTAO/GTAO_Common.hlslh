typedef min16float      lpfloat;
typedef min16float2     lpfloat2;
typedef min16float3     lpfloat3;
typedef min16float4     lpfloat4;
typedef min16float3x3   lpfloat3x3;

#define XE_GTAO_DEPTH_MIP_LEVELS                    5                   // this one is hard-coded to 5 for now
#define XE_GTAO_NUMTHREADS_X                        8                   // these can be changed
#define XE_GTAO_NUMTHREADS_Y                        8                   // these can be changed

#ifndef XE_GTAO_USE_DEFAULT_CONSTANTS
#define XE_GTAO_USE_DEFAULT_CONSTANTS 1
#endif

// some constants reduce performance if provided as dynamic values; if these constants are not required to be dynamic and they match default values, 
// set XE_GTAO_USE_DEFAULT_CONSTANTS and the code will compile into a more efficient shader
#define XE_GTAO_DEFAULT_RADIUS_MULTIPLIER               (1.457f  )  // allows us to use different value as compared to ground truth radius to counter inherent screen space biases
#define XE_GTAO_DEFAULT_FALLOFF_RANGE                   (0.615f  )  // distant samples contribute less
#define XE_GTAO_DEFAULT_SAMPLE_DISTRIBUTION_POWER       (2.0f    )  // small crevices more important than big surfaces
#define XE_GTAO_DEFAULT_THIN_OCCLUDER_COMPENSATION      (0.0f    )  // the new 'thickness heuristic' approach
#define XE_GTAO_DEFAULT_FINAL_VALUE_POWER               (2.2f    )  // modifies the final ambient occlusion value using power function - this allows some of the above heuristics to do different things
#define XE_GTAO_DEFAULT_DEPTH_MIP_SAMPLING_OFFSET       (3.30f   )  // main trade-off between performance (memory bandwidth) and quality (temporal stability is the first affected, thin objects next)

#define XE_GTAO_OCCLUSION_TERM_SCALE                    (1.5f)      // for packing in UNORM (because raw, pre-denoised occlusion term can overshoot 1 but will later average out to 1)

struct GTAOConstants
{
	uint2 viewportSize;
	float2 viewportPixelSize; // .zw == 1.0 / ViewportSize.xy

	float2 depthUnpackConsts;
	float2 cameraTanHalfFov;

	float2 NDCToViewMul;
	float2 NDCToViewAdd;

	float2 NDCToViewMul_x_PixelSize;
	float effectRadius; // world (viewspace) maximum size of the shadow
	float effectFalloffRange;

	float radiusMultiplier;
	float padding0;
	float finalValuePower;
	float denoiseBlurBeta;

	float sampleDistributionPower;
	float thinOccluderCompensation;
	float depthMIPSamplingOffset;
	int noiseIndex; // frameIndex % 64 if using TAA or 0 otherwise
};

cbuffer GTAOBuffer : register(b13)
{
	GTAOConstants u_constants;
}

float XeGTAO_ScreenSpaceToViewSpaceDepth( const float screenDepth, const GTAOConstants consts )
{
    float depthLinearizeMul = consts.depthUnpackConsts.x;
    float depthLinearizeAdd = consts.depthUnpackConsts.y;
    // Optimised version of "-cameraClipNear / (cameraClipFar - projDepth * (cameraClipFar - cameraClipNear)) * cameraClipFar"
    return depthLinearizeMul / (depthLinearizeAdd - screenDepth);
}